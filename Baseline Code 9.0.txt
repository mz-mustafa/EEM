import openpyxl
from openpyxl.utils import get_column_letter

import openpyxl

class Solar_meta:
    def __init__(self, capital_cost_baseline, opex_baseline, useful_life, fixed_opex_inflation_rate,
                 specific_yield, mw_space_required, total_energy, avg_hours_sun_available, avg_hours_sun_unavailable,
                 months, per_month_energy_output, output_percentage):
        self.capital_cost_baseline = capital_cost_baseline
        self.opex_baseline = opex_baseline
        self.useful_life = useful_life
        self.fixed_opex_inflation_rate = fixed_opex_inflation_rate
        self.specific_yield = specific_yield
        self.mw_space_required = mw_space_required
        self.total_energy = total_energy
        self.avg_hours_sun_available = avg_hours_sun_available
        self.avg_hours_sun_unavailable = avg_hours_sun_unavailable
        self.months = months
        self.per_month_energy_output = per_month_energy_output
        self.output_percentage = output_percentage

    def update_output_percentage(self):
        self.output_percentage = [round((energy / self.total_energy) * 100, 1) for energy in self.per_month_energy_output]

    def summary(self):
        return f"""Summary of Solar_Instances:
        Capital Cost Baseline: Rs. {self.capital_cost_baseline} per MW
        OPEX Baseline: Rs. {self.opex_baseline} per month per MW
        Useful Life: {self.useful_life} years
        Fixed OPEX Inflation Rate: {self.fixed_opex_inflation_rate}%
        Specific Yield: {self.specific_yield} MWh/MWp
        1 MW Space Required: {self.mw_space_required} sq. meters
        Total Energy: {self.total_energy} MWh
        Avg Hours per Month Sun Availability: {self.avg_hours_sun_available} hours
        Avg Hours per Month Sun Unavailability: {self.avg_hours_sun_unavailable} hours
        Months: {self.months}
        Per Month Energy Output: {self.per_month_energy_output} MWh
        Output Percentage: {self.output_percentage}%"""

# Load the Excel file using openpyxl
excel_file_path = 'solar_data.xlsx'
wb = openpyxl.load_workbook(excel_file_path, data_only=True)
sheet = wb['Sheet1']

# Read values for Solar_Instances instance from the Excel sheet
solar_instances = Solar_meta(
    capital_cost_baseline=sheet['A2'].value,
    opex_baseline=sheet['B2'].value,
    useful_life=sheet['C2'].value,
    fixed_opex_inflation_rate=sheet['D2'].value,
    specific_yield=sheet['E2'].value,
    mw_space_required=sheet['F2'].value,
    total_energy=sheet['G2'].value,
    avg_hours_sun_available=sheet['H2'].value,
    avg_hours_sun_unavailable=sheet['I2'].value,
    months=[sheet[f'A{i}'].value for i in range(6, 18)],
    per_month_energy_output=[sheet[f'B{i}'].value for i in range(6, 18)],
    output_percentage=[sheet[f'C{i}'].value for i in range(6, 18)]
)

# Update Output Percentage using the function
solar_instances.update_output_percentage()

# Print summary of Solar_Instances
print(solar_instances.summary())


################################################################################

import openpyxl

class Wind_meta:
    def __init__(self, capital_cost_baseline, opex_baseline, useful_life, fixed_opex_inflation_rate,
                 days_of_year, hours_of_day, power_density_at_site, wind_class_applicable,
                 selected_turbine_rotor_diameter, swept_area, tower_height, power_density_of_turbine,
                 avg_speed, turbine_rated_power, output_multiplier_1, output_multiplier_2,
                 output_multiplier_3, space_required_for_2mw, months, per_month_windspeed):
        self.capital_cost_baseline = capital_cost_baseline
        self.opex_baseline = opex_baseline
        self.useful_life = useful_life
        self.fixed_opex_inflation_rate = fixed_opex_inflation_rate
        self.days_of_year = days_of_year
        self.hours_of_day = hours_of_day
        self.power_density_at_site = power_density_at_site
        self.wind_class_applicable = wind_class_applicable
        self.selected_turbine_rotor_diameter = selected_turbine_rotor_diameter
        self.swept_area = swept_area
        self.tower_height = tower_height
        self.power_density_of_turbine = power_density_of_turbine
        self.avg_speed = avg_speed
        self.turbine_rated_power = turbine_rated_power
        self.output_multiplier_1 = output_multiplier_1
        self.output_multiplier_2 = output_multiplier_2
        self.output_multiplier_3 = output_multiplier_3
        self.space_required_for_2mw = space_required_for_2mw
        self.months = months
        self.per_month_windspeed = per_month_windspeed
        self.output_percentage = self.calculate_output_percentage()

    def calculate_output_percentage(self):
        return [(speed / 12) * 100 for speed in self.per_month_windspeed]

    def summary(self):
        return f"""Summary of Wind_Instances:
        Capital Cost Baseline: Rs. {self.capital_cost_baseline} per MW
        OPEX Baseline: Rs. {self.opex_baseline} per year per MW
        Useful Life: {self.useful_life} years
        Fixed OPEX Inflation Rate: {self.fixed_opex_inflation_rate}%
        Days of Year: {self.days_of_year}
        Hours of Day: {self.hours_of_day}
        Power Density at Site: {self.power_density_at_site} W/m²
        Wind Class Applicable: {self.wind_class_applicable}
        Selected Turbine's Rotor Diameter: {self.selected_turbine_rotor_diameter} m
        Swept Area: {self.swept_area} m²
        Tower Height: {self.tower_height} m
        Power Density of Turbine: {self.power_density_of_turbine} W/m²
        Average Wind Speed: {self.avg_speed} m/s
        Turbine Rated Power: {self.turbine_rated_power} kW
        Wind Turbine Output Multiplier 1: {self.output_multiplier_1}
        Wind Turbine Output Multiplier 2: {self.output_multiplier_2}
        Wind Turbine Output Multiplier 3: {self.output_multiplier_3}
        Space Required for 2MW Turbine: {self.space_required_for_2mw} m²
        Months: {self.months}
        Per Month Wind Speed Index: {self.per_month_windspeed}
        Output Percentage: {[f"{round(value, 1)}" for value in self.output_percentage]}%"""

# Load the Excel file using openpyxl
excel_file_path = 'solar_data.xlsx'  # Replace with the correct path to your Excel file
wb = openpyxl.load_workbook(excel_file_path)
sheet_name = wb['Sheet2']  # Change to the desired sheet name

# Extract header data
months = [sheet_name[f'A{i}'].value for i in range(6, 18)]
per_month_windspeed = [sheet_name[f'B{i}'].value for i in range(6, 18)]

# Create instance of Wind_meta
wind_instances = Wind_meta(
    capital_cost_baseline=sheet_name['A2'].value,
    opex_baseline=sheet_name['B2'].value,
    useful_life=sheet_name['C2'].value,
    fixed_opex_inflation_rate=sheet_name['D2'].value,
    days_of_year=sheet_name['E2'].value,
    hours_of_day=sheet_name['F2'].value,
    power_density_at_site=sheet_name['G2'].value,
    wind_class_applicable=sheet_name['H2'].value,
    selected_turbine_rotor_diameter=sheet_name['I2'].value,
    swept_area=sheet_name['J2'].value,
    tower_height=sheet_name['K2'].value,
    power_density_of_turbine=sheet_name['L2'].value,
    avg_speed=sheet_name['M2'].value,
    turbine_rated_power=sheet_name['N2'].value,
    output_multiplier_1=sheet_name['O2'].value,
    output_multiplier_2=sheet_name['P2'].value,
    output_multiplier_3=sheet_name['Q2'].value,
    space_required_for_2mw=sheet_name['R2'].value,
    months=months,
    per_month_windspeed=per_month_windspeed
)

# Print summary of Wind_Instances
print(wind_instances.summary())


#######################################################################

import openpyxl

class Grid_meta:
    def __init__(self, file_path, existing_pp_baseline, total_energy_req, chp_gas_vol, chp_mwh, ke_peak_mwh, ke_offpeak_mwh,
                 operating_conditions, time, weight_ke, weight_pp):
        # Initialize Grid data from the Excel file
        self.data = {}
        self.headers = []  # Initialize a list to store the headers
        workbook = openpyxl.load_workbook(file_path, data_only=True)
        sheet = workbook['Sheet3']

        # Read headers starting from cell E12 to AB12
        for col in range(5, 29, 2):  # Assuming headers are in columns E to AB
            header = sheet.cell(row=12, column=col).value
            self.headers.extend([f'{header} KE', f'{header} PP'])

        # Read other data
        self.data['Unofficial charges'] = sheet['A2'].value
        self.data['NOC Fee'] = sheet['B2'].value
        self.data['ROW cost'] = sheet['C2'].value
        self.data['Supervision charges'] = sheet['D2'].value
        self.data['Cost of right of way'] = sheet['E2'].value
        self.data['Security Deposit for 11kV'] = sheet['F2'].value
        self.data['Tariff baseline fixed'] = sheet['G2'].value
        self.data['Tariff baseline variable- offpeak'] = sheet['H2'].value
        self.data['Tariff baseline variable- peak'] = sheet['I2'].value
        self.data['Failure Rate'] = sheet['J2'].value
        self.data['Failure Loss (Immediate)'] = sheet['K2'].value
        self.data['Failure Loss (Length of time)'] = sheet['L2'].value
        self.data['Average outage time per failure'] = sheet['M2'].value
        self.data['Average time of failure outage per month'] = sheet['N2'].value
        self.data['Average time of availability per month'] = sheet['O2'].value
        self.data['Sanctioned Load (MW)'] = sheet['P2'].value
        self.data['Sanctioned Load half'] = sheet['Q2'].value

        # Define units for each attribute
        self.units = {
            'Unofficial charges': 'Rs./MW',
            'NOC Fee': 'Rs.',
            'ROW cost': 'Rs.',
            'Supervision charges': 'Rs.',
            'Cost of right of way': 'Rs.',
            'Security Deposit for 11kV': 'Rs.',
            'Tariff baseline fixed': 'Rs./MW',
            'Tariff baseline variable- offpeak': 'Rs./MW/month',
            'Tariff baseline variable- peak': 'Rs. Per kWh',
            'Failure Rate': 'Rs. Per kWh',
            'Failure Loss (Immediate)': 'No. of Failures/Year',
            'Failure Loss (Length of time)': 'Rupees/Failure',
            'Average outage time per failure': 'Rupees/one hour of failure',
            'Average time of failure outage per month': 'hours/failure',
            'Average time of availability per month': 'hours/month',
            'Sanctioned Load (MW)': 'MW',
            'Sanctioned Load half': 'MW'
        }

        # Initialize GDE data
        self.existing_pp_baseline = existing_pp_baseline
        self.total_energy_req = total_energy_req
        self.chp_gas_vol = chp_gas_vol
        self.chp_mwh = chp_mwh
        self.ke_peak_mwh = ke_peak_mwh
        self.ke_offpeak_mwh = ke_offpeak_mwh
        self.operating_conditions = operating_conditions
        self.time = time
        self.weight_ke = weight_ke
        self.weight_pp = weight_pp

        # Define month names
        self.months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']

    def calculate_month_ke(self, month_index):
        month_ke = []
        for i, condition in enumerate(self.operating_conditions):
            if condition == 'off-peak':
                ke_value = (self.ke_offpeak_mwh[month_index] * self.weight_ke[i]) / 30
            else:
                ke_value = (self.ke_peak_mwh[month_index] * self.weight_ke[i]) / 30
            month_ke.append(ke_value)
        return month_ke

    def calculate_month_pp(self, month_index):
        month_pp = []
        for i, condition in enumerate(self.operating_conditions):
            if condition in ('off-peak', 'peak'):
                pp_value = (self.chp_mwh[month_index] * self.weight_pp[i]) / 30
                month_pp.append(pp_value)
        return month_pp

    def summary(self):
        summary = "Grid_Instances Summary:\n"
        # Include the Grid data in the summary
        for key, value in self.data.items():
            summary += f"{key}: {value} {self.units[key]}\n"

        # Include the headers in the summary
        summary += "Headers:\n" + ", ".join(self.headers) + "\n"

        # Include the GDE data in the summary
        for attribute, value in self.__dict__.items():
            if attribute != 'data' and attribute != 'headers' and attribute != 'units' and attribute != 'months':
                summary += f"{attribute}: {value}\n"

        # Generate summaries for all months
        for month in self.months:
            month_ke_values = self.calculate_month_ke(0)
            summary += f"{month} KE:\n" + ", ".join([f"{value:.2f}" for value in month_ke_values]) + "\n"

            month_pp_values = self.calculate_month_pp(0)
            summary += f"{month} PP:\n" + ", ".join([f"{value:.2f}" for value in month_pp_values]) + "\n"

        return summary


# Read data from the Excel file
workbook = openpyxl.load_workbook('solar_data.xlsx')
sheet = workbook['Sheet3']
existing_pp_baseline = sheet['B4'].value
total_energy_req = [cell.value for row in sheet.iter_rows(min_row=5, max_row=5, min_col=2, max_col=13) for cell in row]
chp_gas_vol = [cell.value for row in sheet.iter_rows(min_row=6, max_row=6, min_col=2, max_col=13) for cell in row]
chp_mwh = [cell.value for row in sheet.iter_rows(min_row=7, max_row=7, min_col=2, max_col=13) for cell in row]
ke_peak_mwh = [cell.value for row in sheet.iter_rows(min_row=8, max_row=8, min_col=2, max_col=13) for cell in row]
ke_offpeak_mwh = [cell.value for row in sheet.iter_rows(min_row=9, max_row=9, min_col=2, max_col=13) for cell in row]
operating_conditions = [cell.value for row in sheet.iter_rows(min_row=13, max_row=36, min_col=1, max_col=1) for cell in row]
time = [cell.value for row in sheet.iter_rows(min_row=13, max_row=36, min_col=2, max_col=2) for cell in row]
weight_ke = [cell.value for row in sheet.iter_rows(min_row=13, max_row=36, min_col=3, max_col=3) for cell in row]
weight_pp = [cell.value for row in sheet.iter_rows(min_row=13, max_row=36, min_col=4, max_col=4) for cell in row]

# Calculate chp_mwh by multiplying chp_gas_vol with existing_pp_baseline and dividing by 1000
chp_mwh = [round(gas_vol * existing_pp_baseline / 1000, 1) for gas_vol in chp_gas_vol]

# Calculate total_energy_req as the sum of chp_mwh, ke_peak_mwh, and ke_offpeak_mwh
total_energy_req = [round(sum(values), 1) for values in zip(chp_mwh, ke_peak_mwh, ke_offpeak_mwh)]

# Create instances
grid_instances = Grid_meta('solar_data.xlsx', existing_pp_baseline, total_energy_req, chp_gas_vol, chp_mwh, ke_peak_mwh, ke_offpeak_mwh,
                           operating_conditions, time, weight_ke, weight_pp)

# Print summaries
grid_summary = grid_instances.summary()
print(grid_summary)



###############################################################################################################################################

# Load the Excel workbook
workbook = openpyxl.load_workbook('solar_data.xlsx')

# Select the sheet you want to work with
sheet = workbook['Sheet3']

# Update a specific cell in the same sheet
new_value = 42
sheet['E13'] = new_value

# Save the updated workbook
workbook.save('solar_data.xlsx')

#########################################################################################################################################

import tkinter as tk
from tkinter import scrolledtext

# Create a function to display the summaries in a GUI
def display_data(solar_instance, wind_instance, grid_instance):
    # Create a new Tkinter window
    window = tk.Tk()
    window.title("Data Summary")

    # Create a scrolled text widget to display the summaries
    text_widget = scrolledtext.ScrolledText(window, width=150, height=35)
    text_widget.pack()

    # Get the summaries from the instances
    solar_summary = solar_instance.summary()
    wind_summary = wind_instance.summary()
    grid_summary = grid_instance.summary()

    # Display the summaries in the text widget
    text_widget.insert(tk.END, "Solar Data Summary:\n\n")
    text_widget.insert(tk.END, "Solar Data:\n")
    text_widget.insert(tk.END, solar_summary + "\n\n")
    text_widget.insert(tk.END, "Wind Data Summary:\n\n")
    text_widget.insert(tk.END, "Wind Data:\n")
    text_widget.insert(tk.END, wind_summary + "\n\n")
    text_widget.insert(tk.END, "Grid Data Summary:\n\n")
    text_widget.insert(tk.END, "Grid Data:\n")
    text_widget.insert(tk.END, grid_summary + "\n\n")

    # Start the Tkinter main loop
    window.mainloop()

# Call the function to display the summaries in the GUI
display_data(solar_instances, wind_instances, grid_instances)


##################################################################################################################################

import openpyxl
import tkinter as tk
from tkinter import ttk
import tkinter.font as tkFont  # Import the tkFont module

class Scenario:
    def __init__(self, parameters, power_sources, matrix):
        self.parameters = parameters
        self.power_sources = power_sources
        self.matrix = matrix

# Load the Excel file using openpyxl
excel_file_path = 'solar_data.xlsx'
wb = openpyxl.load_workbook(excel_file_path, data_only=True)
sheet = wb['Sheet4']

# Define the range of rows and columns to read from the Excel sheet
start_row = 1
end_row = 14
start_col = 1  # Column C
end_col = 7  # Column O

# Initialize an empty matrix
matrix = []

# Read data from the Excel sheet and populate the matrix
for row_num in range(start_row, end_row + 1):
    row_data = []
    for col_num in range(start_col, end_col + 1):
        cell_value = sheet.cell(row=row_num, column=col_num).value
        row_data.append(cell_value)
    matrix.append(row_data)

# Define the names of parameters and power sources based on the Excel sheet structure
parameters = [row[0] for row in matrix]  # Assumes the first column contains parameter names
power_sources = matrix[0][1:]  # Assumes the first row contains power source names

# Create an instance of Scenario
SM = Scenario(parameters, power_sources, matrix)

# Create a function to display the matrix in a GUI
def display_matrix():
    # Create a new Tkinter window
    window = tk.Tk()
    window.title("Scenario Matrix")

    # Create a Treeview widget to display the matrix
    tree = ttk.Treeview(window, columns=["Parameter"] + power_sources, show="headings")
    tree.heading("#1", text="Parameter")
    for i, source in enumerate(power_sources, start=2):
        tree.heading("#" + str(i), text=source)

    # Populate the Treeview with data from the matrix
    for i, parameter in enumerate(parameters[1:]):  # Start from the second parameter to avoid repeating headers
        tree.insert("", "end", values=[parameter] + matrix[i + 1][1:])

    # Adjust column widths to best fit the text
    for col in tree["columns"]:
        max_col_width = max([tkFont.Font().measure(tree.set(child, col)) for child in tree.get_children()])
        tree.column(col, width=max_col_width + 40)

    # Calculate the height based on the number of rows
    tree_height = min(len(parameters) - 1, 20)  # Adjust 20 as needed to limit the number of displayed rows
    tree["height"] = tree_height

    tree.pack()

    # Start the Tkinter main loop
    window.mainloop()

# Call the function to display the matrix in a GUI
display_matrix()






